{"version":3,"sources":["../../src/utils/cache.js"],"names":["Promise","require","fs","_","objectToMap","obj","Map","Object","entries","mapToObject","map","key","value","db","directory","save","exports","initCache","ensureDirSync","process","cwd","env","NODE_ENV","tmpdir","previousState","JSON","parse","readFileSync","e","get","resolve","reject","set","debounce","writeFile","stringify","noop"],"mappings":";;AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAE,UAAF,CAAvB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAE,UAAF,CAAlB;;AACA,MAAME,CAAC,GAAGF,OAAO,CAAE,QAAF,CAAjB;;AAEA,MAAMG,WAAW,GAAGC,GAAG,IAAI,IAAIC,GAAJ,CAAQC,MAAM,CAACC,OAAP,CAAeH,GAAf,CAAR,CAA3B;;AAEA,MAAMI,WAAW,GAAGC,GAAG,IAAI;AACzB,QAAML,GAAG,GAAG,EAAZ;;AACA,uBAAyBK,GAAzB,kHAA8B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,QAApBC,GAAoB;AAAA,QAAfC,KAAe;AAC5BP,IAAAA,GAAG,CAACM,GAAD,CAAH,GAAWC,KAAX;AACD;;AACD,SAAOP,GAAP;AACD,CAND;;AAQA,IAAIQ,EAAJ;AACA,IAAIC,SAAJ;AACA,IAAIC,IAAJ;AAEA;;;;AAGAC,OAAO,CAACC,SAAR,GAAoB,MAAM;AACxBf,EAAAA,EAAE,CAACgB,aAAH,CAAkB,GAAEC,OAAO,CAACC,GAAR,EAAc,eAAlC;;AACA,MAAID,OAAO,CAACE,GAAR,CAAYC,QAAZ,KAA0B,MAA9B,EAAqC;AACnCR,IAAAA,SAAS,GAAGb,OAAO,CAAE,IAAF,CAAP,CAAcsB,MAAd,EAAZ;AACD,GAFD,MAEO;AACLT,IAAAA,SAAS,GAAGK,OAAO,CAACC,GAAR,KAAiB,eAA7B;AACD;;AAED,MAAII,aAAJ;;AACA,MAAI;AACFA,IAAAA,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWxB,EAAE,CAACyB,YAAH,CAAiB,GAAEb,SAAU,UAA7B,CAAX,CAAhB;AACD,GAFD,CAEE,OAAOc,CAAP,EAAU,CACV;AACD;;AAED,MAAIJ,aAAJ,EAAmB;AACjBX,IAAAA,EAAE,GAAGT,WAAW,CAACoB,aAAD,CAAhB;AACD,GAFD,MAEO;AACLX,IAAAA,EAAE,GAAG,IAAIP,GAAJ,EAAL;AACD;AACF,CApBD;AAsBA;;;;;;;AAKAU,OAAO,CAACa,GAAR,GAAclB,GAAG,IACf,IAAIX,OAAJ,CAAY,CAAC8B,OAAD,EAAUC,MAAV,KAAqB;AAC/BD,EAAAA,OAAO,CAACjB,EAAE,CAACgB,GAAH,CAAOlB,GAAP,CAAD,CAAP;AACD,CAFD,CADF;AAKA;;;;;;;;AAMAK,OAAO,CAACgB,GAAR,GAAc,CAACrB,GAAD,EAAMC,KAAN,KACZ,IAAIZ,OAAJ,CAAY,CAAC8B,OAAD,EAAUC,MAAV,KAAqB;AAC/BlB,EAAAA,EAAE,CAACmB,GAAH,CAAOrB,GAAP,EAAYC,KAAZ;AACAG,EAAAA,IAAI;AACJe,EAAAA,OAAO,CAAE,IAAF,CAAP;AACD,CAJD,CADF;;AAOA,IAAIX,OAAO,CAACE,GAAR,CAAYC,QAAZ,KAA0B,MAA9B,EAAqC;AACnCP,EAAAA,IAAI,GAAGZ,CAAC,CAAC8B,QAAF,CAAW,MAAM;AACtB/B,IAAAA,EAAE,CAACgC,SAAH,CAAc,GAAEpB,SAAU,UAA1B,EAAqCW,IAAI,CAACU,SAAL,CAAe1B,WAAW,CAACI,EAAD,CAA1B,CAArC;AACD,GAFM,EAEJ,GAFI,CAAP;AAGD,CAJD,MAIO;AACLE,EAAAA,IAAI,GAAGZ,CAAC,CAACiC,IAAT;AACD","sourcesContent":["const Promise = require(`bluebird`)\nconst fs = require(`fs-extra`)\nconst _ = require(`lodash`)\n\nconst objectToMap = obj => new Map(Object.entries(obj))\n\nconst mapToObject = map => {\n  const obj = {}\n  for (let [key, value] of map) {\n    obj[key] = value\n  }\n  return obj\n}\n\nlet db\nlet directory\nlet save\n\n/**\n * Initialize cache store. Reuse existing store if available.\n */\nexports.initCache = () => {\n  fs.ensureDirSync(`${process.cwd()}/.cache/cache`)\n  if (process.env.NODE_ENV === `test`) {\n    directory = require(`os`).tmpdir()\n  } else {\n    directory = process.cwd() + `/.cache/cache`\n  }\n\n  let previousState\n  try {\n    previousState = JSON.parse(fs.readFileSync(`${directory}/db.json`))\n  } catch (e) {\n    // ignore\n  }\n\n  if (previousState) {\n    db = objectToMap(previousState)\n  } else {\n    db = new Map()\n  }\n}\n\n/**\n * Get value of key\n * @param key\n * @returns {Promise}\n */\nexports.get = key =>\n  new Promise((resolve, reject) => {\n    resolve(db.get(key))\n  })\n\n/**\n * Create or update key with value\n * @param key\n * @param value\n * @returns {Promise} - Promise object which resolves to 'Ok' if successful.\n */\nexports.set = (key, value) =>\n  new Promise((resolve, reject) => {\n    db.set(key, value)\n    save()\n    resolve(`Ok`)\n  })\n\nif (process.env.NODE_ENV !== `test`) {\n  save = _.debounce(() => {\n    fs.writeFile(`${directory}/db.json`, JSON.stringify(mapToObject(db)))\n  }, 250)\n} else {\n  save = _.noop\n}\n"],"file":"cache.js"}