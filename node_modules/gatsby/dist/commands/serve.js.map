{"version":3,"sources":["../../src/commands/serve.js"],"names":["openurl","require","signalExit","compression","express","getConfigFile","preferDefault","module","exports","program","prefixPaths","port","open","parseInt","config","directory","pathPrefix","app","router","Router","use","static","req","res","next","accepts","status","sendFile","root","server","listen","openUrlString","console","log","code","signal","close"],"mappings":";;;;;;AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAE,KAAF,CAAvB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAE,aAAF,CAA1B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAE,aAAF,CAA3B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAE,SAAF,CAAvB;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAE,8BAAF,CAA7B;;AACA,MAAMK,aAAa,GAAGL,OAAO,CAAE,6BAAF,CAA7B;;AAEAM,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA,6CAAiB,WAAMC,OAAN,EAAiB;AAAA,QAC1BC,WAD0B,GACED,OADF,CAC1BC,WAD0B;AAAA,QACbC,IADa,GACEF,OADF,CACbE,IADa;AAAA,QACPC,IADO,GACEH,OADF,CACPG,IADO;AAEhCD,IAAAA,IAAI,GAAG,OAAOA,IAAP,KAAiB,QAAjB,GAA2BE,QAAQ,CAACF,IAAD,EAAO,EAAP,CAAnC,GAAgDA,IAAvD;AAEA,UAAMG,MAAM,SAASR,aAAa,CAChCD,aAAa,CAACI,OAAO,CAACM,SAAT,EAAqB,eAArB,CADmB,CAAlC;AAIA,QAAIC,UAAU,GAAGF,MAAM,IAAIA,MAAM,CAACE,UAAlC;AACAA,IAAAA,UAAU,GAAGN,WAAW,IAAIM,UAAf,GAA4BA,UAA5B,GAA0C,GAAvD;AAEA,UAAMC,GAAG,GAAGb,OAAO,EAAnB;AACA,UAAMc,MAAM,GAAGd,OAAO,CAACe,MAAR,EAAf;AACAD,IAAAA,MAAM,CAACE,GAAP,CAAWjB,WAAW,EAAtB;AACAe,IAAAA,MAAM,CAACE,GAAP,CAAWhB,OAAO,CAACiB,MAAR,CAAgB,QAAhB,CAAX;AACAH,IAAAA,MAAM,CAACE,GAAP,CAAW,CAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC7B,UAAIF,GAAG,CAACG,OAAJ,CAAa,MAAb,CAAJ,EAAyB;AACvBF,QAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,QAAhB,CAA0B,UAA1B,EAAqC;AAAEC,UAAAA,IAAI,EAAG;AAAT,SAArC;AACD,OAFD,MAEO;AACLJ,QAAAA,IAAI;AACL;AACF,KAND;AAOAP,IAAAA,GAAG,CAACG,GAAJ,CAAQJ,UAAR,EAAoBE,MAApB;AAEA,UAAMW,MAAM,GAAGZ,GAAG,CAACa,MAAJ,CAAWnB,IAAX,EAAiB,MAAM;AACpC,UAAIoB,aAAa,GAAI,oBAAmBpB,IAAK,GAAEK,UAAW,EAA1D;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAa,0BAAb,EAAwCF,aAAxC;;AACA,UAAInB,IAAJ,EAAU;AACRoB,QAAAA,OAAO,CAACC,GAAR,CAAa,oBAAb;AACAjC,QAAAA,OAAO,CAAC+B,aAAD,CAAP;AACD;AACF,KAPc,CAAf;AASA7B,IAAAA,UAAU,CAAC,CAACgC,IAAD,EAAOC,MAAP,KAAkB;AAC3BN,MAAAA,MAAM,CAACO,KAAP;AACD,KAFS,CAAV;AAGD,GApCD;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* @flow weak */\nconst openurl = require(`opn`)\nconst signalExit = require(`signal-exit`)\nconst compression = require(`compression`)\nconst express = require(`express`)\nconst getConfigFile = require(`../bootstrap/get-config-file`)\nconst preferDefault = require(`../bootstrap/prefer-default`)\n\nmodule.exports = async program => {\n  let { prefixPaths, port, open } = program\n  port = typeof port === `string` ? parseInt(port, 10) : port\n\n  const config = await preferDefault(\n    getConfigFile(program.directory, `gatsby-config`)\n  )\n\n  let pathPrefix = config && config.pathPrefix\n  pathPrefix = prefixPaths && pathPrefix ? pathPrefix : `/`\n\n  const app = express()\n  const router = express.Router()\n  router.use(compression())\n  router.use(express.static(`public`))\n  router.use((req, res, next) => {\n    if (req.accepts(`html`)) {\n      res.status(404).sendFile(`404.html`, { root: `public` })\n    } else {\n      next()\n    }\n  })\n  app.use(pathPrefix, router)\n\n  const server = app.listen(port, () => {\n    let openUrlString = `http://localhost:${port}${pathPrefix}`\n    console.log(`gatsby serve running at:`, openUrlString)\n    if (open) {\n      console.log(`Opening browser...`)\n      openurl(openUrlString)\n    }\n  })\n\n  signalExit((code, signal) => {\n    server.close()\n  })\n}\n"],"file":"serve.js"}